## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
data.frame(result_list)
}
rankall("heart attack", "best")
helper <- function(state, by_state, outcome, num) {
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankall <- function(outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
data.frame(hospital = result_list, state = state_list)
}
rankall("heart attack", "best")
head(rankall("heart attack", 20), 10)
helper <- function(state, by_state, outcome, num) {
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankall <- function(outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
result <- data.frame(hospital = result_list, state = state_list)
result[order(result$state)]
}
head(rankall("heart attack", 20), 10)
helper <- function(state, by_state, outcome, num) {
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankall <- function(outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
result <- data.frame(hospital = result_list, state = state_list)
result[,order(result$state)]
}
head(rankall("heart attack", 20), 10)
helper <- function(state, by_state, outcome, num) {
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankall <- function(outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
result <- data.frame(hospital = result_list, state = state_list)
result[order(result$state),]
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best <- function(state, outcome) {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!state %in% state_list) {
stop("invalid state")
}
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
head(current[order(as.numeric(current[, 11]), current$Hospital.Name),], 1)
} else if(outcome =="heart failure") {
head(current[order(as.numeric(current[, 17]), current$Hospital.Name),], 1)
} else {
head(current[order(as.numeric(current[, 23]), current$Hospital.Name),], 1)
}
result$Hospital.Name
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!state %in% state_list) {
stop("invalid state")
}
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(cas.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital <- function(state, outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!state %in% state_list) {
stop("invalid state")
}
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
helper <- function(state, by_state, outcome, num) {
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankall <- function(outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
result_list <- sapply(state_list, helper, by_state, outcome, num)
result <- data.frame(hospital = result_list, state = state_list)
result[order(result$state),]
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rankhospital <- function(state, outcome, num = "best") {
outcome_list <- c("heart attack", "heart failure","pneumonia")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- data[, 7]
state_list <- unique(states)
if(!state %in% state_list) {
stop("invalid state")
}
if(!outcome %in% outcome_list) {
stop("invalid outcome")
}
by_state <- split(data, states)
current <- by_state[[state]]
## Return hospital name in that state with lowest 30-day death
result <-
if(outcome == "heart attack") {
current <- current[order(as.numeric(current[, 11]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 11]))
current[!not_a,]
} else if(outcome == "heart failure") {
current <- current[order(as.numeric(current[, 17]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 17]))
current[!not_a,]
} else {
current <- current[order(as.numeric(current[, 23]), current$Hospital.Name),]
not_a <- is.na(as.numeric(current[, 23]))
current[!not_a,]
}
num <-
if(num == "best") {
1
} else if(num == "worst") {
nrow(result)
} else {
num
}
result <- result[num,]
result$Hospital.Name
}
rankhospital("TX", "pneumonia", "worst")
install_from_swirl("Getting and Cleaning Data")
?read.table
?read.csv
setwd("~/dev/RepData_PeerAssessment1")
data <- read.csv("activity.zip")
summary(data)
data <- read.table("activity.zip")
summary(data)
data <- read.csv(unz("activity.zip")
)
data <- read.csv(unz("activity.zip"))
data <- read.csv(unz("activity.zip", "activity.csv"))
data <- read.csv(unz("activity.zip", "activity.csv"))
summary(data)
str(data)
head(data)
colMean(data$steps)
?colMeans(data$steps)
?colMeans(data$steps, na.rm = TRUE)
colMeans(data$steps, na.rm = TRUE)
colMeans(data, na.rm = TRUE)
mean(data$steps)
mean(data$steps, na.rm = TRUE)
head(data)
tail(data)
byDate = split(data, data$date)
sapply(byDate, function(subList) sum(subList$steps))
stepsPerDay = mapply(byDate, function(subList) sum(subList$steps))
stepsPerDay = sapply(byDate, function(subList) sum(subList$steps))
hist(stepsPerDay)
head(stepsPerDay)
?hist
?tapply
tapply(data$steps, data$date, sum)
tapply(data$steps, data$date, mean)
hist(stepsPerDay)
data <- read.csv(unz("activity.zip", "activity.csv"))
stepsPerDay <-  tapply(data$steps, data$date, sum)
hist(stepsPerDay)
tapply(data$steps, data$date, mean)
tapply(data$steps, data$date, mean, na.rm = TRUE)
tapply(data$steps, data$date, median, na.rm = TRUE)
?median
tapply(data$steps, data$date, median)
plot(x = tapply(data$steps, data$interval, avg), y = tapply(data$steps, data$date, avg) type = "l")
plot(x = tapply(data$steps, data$interval, avg), y = tapply(data$steps, data$date, avg))
plot(x = tapply(data$steps, data$interval, mean), y = tapply(data$steps, data$date, mean))
plot(tapply(data$steps, data$interval, mean), tapply(data$steps, data$date, mean))
tapply(data$steps, data$date, mean)
tapply(data$steps, data$interval, mean)
tapply(data$steps, data$interval, mean, na.rm = TRUE)
tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(tapply(data$steps, data$interval, mean), tapply(data$steps, data$date, mean, na.rm = TRUE))
plot(tapply(data$steps, data$date, mean, na.rm = TRUE))
plot(tapply(data$steps, data$date, mean, na.rm = TRUE), type = "l")
plot(tapply(data$steps, data$interval, mean, na.rm = TRUE), type = "l")
tapply(data$steps, data$interval, mean, na.rm = TRUE)
summary(tapply(data$steps, data$interval, mean, na.rm = TRUE))
str(tapply(data$steps, data$interval, mean, na.rm = TRUE))
avgStepsPerInterval <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(avgStepsPerInterval, type = "l", xlab = "Interval", ylab = "Avg Steps")
View(data)
max(avgStepsPerInterval)
avgStepsPerInterval
is.vector(avgStepsPerInterval)
is.list(avgStepsPerInterval)
is.data.frame(avgStepsPerInterval)
is.array(avgStepsPerInterval)
which.max(avgStepsPerInterval)
which.max(avgStepsPerInterval)
which.min(avgStepsPerInterval)
stepsPerDay <- ddply(data[!is.na(data$steps),], .(date), summarize, steps = sum(steps))
head(stepsPerDay)
histogram(stepsPerDay$steps, xlab = 'Steps', main = 'Total steps per day', breaks = 10)
hist(stepsPerDay$steps, xlab = 'Steps', main = 'Total steps per day', breaks = 10)
hist(stepsPerDay, xlab = 'Steps', main = 'Total steps per day', breaks = 10)
library("plyr")
dfPerDate <- ddply(data,~date,summarise,sumSteps=sum(steps,na.rm=TRUE),meanSteps=mean(steps,na.rm=TRUE),sdSteps=sd(steps,na.rm=TRUE))
meanTotalStepsPerDay <- mean(dfPerDate$sumSteps,na.rm=TRUE)
medianTotalStepsPerDay <- median(dfPerDate$sumSteps,na.rm=TRUE)
dataSumByDay <- aggregate(data$steps,list(data$day), function(x) sum(x,na.rm=TRUE))
data <- read.csv(unz("activity.zip", "activity.csv"))
dataSumByDay <- aggregate(data$steps,list(data$day), function(x) sum(x,na.rm=TRUE))
avgStepsPerInterval
unique(data$interval)
intervalData <- data.frame(interval = unique(data$interval), steps = avgStepsPerInterval)
intervalData
plot(intervalData, type = "l")
intervalData2 <- as.data.frame(avgStepsPerInterval)
head(intervalData2)
plot(intervalData2, type = "l")
which.max(intervalData, intervalData$avgSteps)
which.max(intervalData)
?max
intervalData[max(intervalData$avgSteps)]
intervalData[max(intervalData$avgSteps, na.rm = TRUE)]
max(intervalData$avgSteps)
max(intervalData$avgSteps, na.rm = TRUE)
intervalData
head(intervalData)
intervalData <- data.frame(interval = unique(data$interval), avgSteps = avgStepsPerInterval)
max(intervalData$avgSteps, na.rm = TRUE)
intervalData[max(intervalData$avgSteps, na.rm = TRUE)]
intervalData[where(max(intervalData$avgSteps, na.rm = TRUE))]
?where
?with
intervalData[with(max(intervalData$avgSteps, na.rm = TRUE))]
intervalData[which.max(intervalData$avgSteps, na.rm = TRUE)]
intervalData[which.max(intervalData$avgSteps)]
intervalData[which(intervalData$avgSteps = max(intervalData$avgSteps)]
intervalData[which(intervalData$avgSteps == max(intervalData$avgSteps)]
intervalData[which(intervalData$avgSteps == max(intervalData$avgSteps))]
